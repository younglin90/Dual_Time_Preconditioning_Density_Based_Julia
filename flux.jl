function flux!(
    ๐::controls, 
    RHS::Array{Float64},
    cells::Vector{mesh.Cell},
    faces_internal::Vector{mesh.Face},
    faces_boundary::Vector{mesh.Face}
)


	
	shock_sensor = shock_discontinuity_sensing_term!(
		๐,cells,faces_internal,faces_boundary
	)



    for face in faces_internal

		cpi2 = min(shock_sensor[face.owner],shock_sensor[face.neighbour])
		wโ = cpi2
		pโ = face.varโ[๐.p]
		ฯโ = face.varโ[๐.ฯ]
		cโ = face.varโ[๐.c]
		pแตฃ = face.varแตฃ[๐.p]
		ฯแตฃ = face.varแตฃ[๐.ฯ]
		cแตฃ = face.varแตฃ[๐.c]
		preLs = abs(pโ) + 0.1 * ฯโ*cโ*cโ
		preRs = abs(pแตฃ) + 0.1 * ฯแตฃ*cแตฃ*cแตฃ
		wโ = min(preLs/preRs,preRs/preLs)

        flux = zeros(Float64, 6, 1)
        flux = YYL_Riemann(
            face.varโ[๐.p],face.varโ[๐.u],face.varโ[๐.v],face.varโ[๐.w],
            face.varโ[๐.T],face.varโ[๐.Yโ],face.varโ[๐.ฯ],face.varโ[๐.Hโ],face.varโ[๐.c],
            face.varแตฃ[๐.p],face.varแตฃ[๐.u],face.varแตฃ[๐.v],face.varแตฃ[๐.w],
            face.varแตฃ[๐.T],face.varแตฃ[๐.Yโ],face.varแตฃ[๐.ฯ],face.varแตฃ[๐.Hโ],face.varแตฃ[๐.c],
            ๐.Lco,๐.Uco,๐.ฮt,
            wโ, wโ, cpi2,
            face.nฬ[1],face.nฬ[2],face.nฬ[3]
            )


        RHS[face.owner, :] -= flux[:]*face.ฮS/cells[face.owner].ฮฉ #* ๐.ฮt
        RHS[face.neighbour, :] += flux[:]*face.ฮS/cells[face.neighbour].ฮฉ #* ๐.ฮt

    end


    for face in faces_boundary

        flux = zeros(Float64, 6, 1)
        flux = YYL_Riemann(
            face.varโ[๐.p],face.varโ[๐.u],face.varโ[๐.v],face.varโ[๐.w],
            face.varโ[๐.T],face.varโ[๐.Yโ],face.varโ[๐.ฯ],face.varโ[๐.Hโ],face.varโ[๐.c],
            face.varแตฃ[๐.p],face.varแตฃ[๐.u],face.varแตฃ[๐.v],face.varแตฃ[๐.w],
            face.varแตฃ[๐.T],face.varแตฃ[๐.Yโ],face.varแตฃ[๐.ฯ],face.varแตฃ[๐.Hโ],face.varแตฃ[๐.c],
            ๐.Lco,๐.Uco,๐.ฮt,
            1.0, 1.0, 1.0,
            face.nฬ[1],face.nฬ[2],face.nฬ[3]
            )

        RHS[face.owner, :] -= flux[:]*face.ฮS/cells[face.owner].ฮฉ #* ๐.ฮt

    end

	i = 1
	for cell in cells

		RHS[i,3] += cell.var[๐.ฯ]*(-9.8)

		i += 1
	end
	

end

function shock_discontinuity_sensing_term!(
    ๐::controls, 
    cells::Vector{mesh.Cell},
    faces_internal::Vector{mesh.Face},
    faces_boundary::Vector{mesh.Face}
)


	udf_coeff_shock = 0.1

	
    cell_cpi2 = zeros(Float64,length(cells))

	for face in faces_internal

		pL = face.varโ[๐.p]
		rhoL = face.varโ[๐.ฯ]
		cL = face.varโ[๐.c]

		#/==========

		pR = face.varแตฃ[๐.p]
		rhoR = face.varแตฃ[๐.ฯ]
		cR = face.varแตฃ[๐.c]

		#/===========
		#RT = sqrt(rhoR/rhoL)
		pLs = pL + udf_coeff_shock * min( rhoL*cL*cL, rhoR*cR*cR ) 
		pRs = pR + udf_coeff_shock * min( rhoL*cL*cL, rhoR*cR*cR ) 

		cpi2 = min( pLs/pRs, pRs/pLs )

		cell_cpi2[face.owner] = min( cell_cpi2[face.owner] , cpi2 )
		cell_cpi2[face.neighbour] = min( cell_cpi2[face.neighbour] , cpi2 )

	end

	return cell_cpi2



end

function YYL_Riemann(
    pโ::Float64,uโ::Float64,vโ::Float64,wโ::Float64,
	Tโ::Float64,Yโโ::Float64,ฯโ::Float64,Hโโ::Float64,cโ::Float64,
    pแตฃ::Float64,uแตฃ::Float64,vแตฃ::Float64,wแตฃ::Float64,
	Tแตฃ::Float64,Yโแตฃ::Float64,ฯแตฃ::Float64,Hโแตฃ::Float64,cแตฃ::Float64,
    Lco::Float64,Uco::Float64,ฮt::Float64,
    wโ::Float64,wโ::Float64,cpi2::Float64,
    nx::Float64,ny::Float64,nz::Float64
)

	Uโโ = uโ*nx + vโ*ny + wโ*nz
	Uโแตฃ = uแตฃ*nx + vแตฃ*ny + wแตฃ*nz

	cฬ = 0.5*(cโ + cแตฃ)
	#Mฬโ = โ(uฬ^2 + vฬ^2 + wฬ^2)/cฬ
	Mโ = Uโโ/cฬ
	Mแตฃ = Uโแตฃ/cฬ
	# calculate M+ and P+ for left state
	Mโโบ = M_func(Mโ,1.0,0.125)
	pโบ = pre_func(Mโ,1.0,0.1875)
	# calculate M- and P- for left state
	Mแตฃโป = M_func(Mแตฃ,-1.0,0.125)
	pโป = pre_func(Mแตฃ,-1.0,0.1875)
	Mฬ = (ฯโ*abs(Mโ)+ฯแตฃ*abs(Mแตฃ)) / (ฯโ+ฯแตฃ)
	KLR = sqrt(0.5*(uโ^2+vโ^2+wโ^2+uแตฃ^2+vแตฃ^2+wแตฃ^2))
	g = 1.0 + max(min(Mโ,0.0),-1.0)*min(max(Mแตฃ,0.0),1.0)
	D_L = Mโ + (1.0-g)*abs(Mโ)
	D_R = Mแตฃ - (1.0-g)*abs(Mแตฃ)
	D_rho = Mฬ*g

	preLs = abs(pโ) + 0.1 * ฯโ*cโ*cโ
	preRs = abs(pแตฃ) + 0.1 * ฯแตฃ*cแตฃ*cแตฃ
	w = 1.0 - min(preLs/preRs,preRs/preLs)^2.0

	ps = pโบ*pโ+pโป*pแตฃ
	pll = 0.0
	if 3.0/4.0 <= min(pโ/pแตฃ,pแตฃ/pโ) && 1.0 > min(pโ/pแตฃ,pแตฃ/pโ) 
		pll=4.0*min(pโ/pแตฃ,pแตฃ/pโ)-3.0
	end
	fL = 0.0
	if abs(Mโ) <= 1.0 
		fL = (pโ/ps-1.0)*pll*abs(Mโโบ)*min(1.0,( (abs(Uโโ)/cฬ) )^0.25)
	end
		
	fR = 0.0
	if abs(Mแตฃ) <= 1.0
		fR = (pโ/ps-1.0)*pll*abs(Mแตฃโป)*min(1.0,( (abs(Uโแตฃ)/cฬ) )^0.25)
	end

	MPP = Mโโบ+Mแตฃโป
	MLP_AUSM = 0.5*(MPP+abs(MPP))
	MRM_AUSM = 0.5*(MPP-abs(MPP))

	MLP_SLAU = 0.5*(D_L+D_rho)
	MRM_SLAU = 0.5*(D_R-D_rho)

	fa1 = w

	MLPL = fa1*MLP_AUSM + (1.0-fa1)*MLP_SLAU
	MRMR = fa1*MRM_AUSM + (1.0-fa1)*MRM_SLAU

	mฬ = ฯโ*cฬ*MLPL + ฯแตฃ*cฬ*MRMR - 
		0.5*
		(1.0-0.5*(1.0-cos(3.141592*min(1.0,max(abs(Mโ),abs(Mแตฃ))))))*
		(1.0-0.5*(1.0+cos(3.141592*min(abs(pโ/pแตฃ),abs(pแตฃ/pโ)))))*
		(pแตฃ-pโ)/cฬ

	Mโโบ = 0.5*(Mโ+abs(Mโ))
	Mแตฃโป = 0.5*(Mแตฃ-abs(Mแตฃ))
	mฬโ = 0.0
	mฬแตฃ = 0.0
    if mฬ >= 0.0
		mฬโ = mฬ - (ฯโ*cฬ*Mแตฃโป)*( w*(1.0+fR)-fR+fL )
		mฬแตฃ = (ฯแตฃ*cฬ*Mแตฃโป)*( w*(1.0+fR) )
    else
		mฬโ = (ฯโ*cฬ*Mโโบ)*( w*(1.0+fL) )
		mฬแตฃ = mฬ - (ฯแตฃ*cฬ*Mโโบ)*( w*(1.0+fL)-fL+fR )
	end
	

	fa2 = w
	gam = 0.6

	pโแตฃ = 0.5*(pโ+pแตฃ) - 
			fa2*(KLR/cฬ)*0.5*pโบ*pโป*0.5*(pโ+pแตฃ)/cฬ*(Uโแตฃ-Uโโ) + 
			max(0.2,gam)*(KLR/cฬ)*0.5*(pโ+pแตฃ)*(pโบ+pโป-1.0) - 
			0.5*(pโบ-pโป)*(pแตฃ-pโ)

	#pโแตฃ = 0.5*(pโ+pแตฃ) + KLR*0.5*(ฯโ+ฯแตฃ)*cฬ*(pโบ+pโป-1.0) - 0.5*(pโบ-pโป)*(pแตฃ-pโ)

	#pโแตฃ = pโ*pโบ + pแตฃ*pโป
	#pโแตฃ = 0.5*(pโ + pแตฃ)
	#=
	mฬ = ฯโ*cฬ*MLP_SLAU + ฯแตฃ*cฬ*MRM_SLAU - 
			0.5*(1.0-min(1.0,1.0/cฬ*KLR))^2.0 *(pแตฃ-pโ)/cฬ
	if mฬ >= 0.0
		mฬโ = mฬ #- (ฯโ*cฬ*Mแตฃโป)*( w*(1.0+fR)-fR+fL )
		mฬแตฃ = 0.0# (ฯแตฃ*cฬ*Mแตฃโป)*( w*(1.0+fR) )
	else
		mฬโ = 0.0#(ฯโ*cฬ*Mโโบ)*( w*(1.0+fL) )
		mฬแตฃ = mฬ #- (ฯแตฃ*cฬ*Mโโบ)*( w*(1.0+fL)-fL+fR )
	end
	=#
#=
	UU = 0.5*(Uโโ+Uโแตฃ)
	if UU > 0.0
		mฬโ = ฯโ * UU
		mฬแตฃ = 0.0
	else
		mฬโ = 0.0
		mฬแตฃ = ฯแตฃ * UU
	end
=#
	#rhohat = 0.5*(ฯโ+ฯแตฃ)
    #gam2 = 0.5*(1.0-tanh(15.0*(min(abs(pโ/pแตฃ),abs(pแตฃ/pโ)))+0.0))
    #gam = max( 0.5, gam2 ) 
	#pโแตฃ = 0.5*(pโ+pแตฃ) + KLR*rhohat*cฬ*(pโบ+pโป-1.0) - 
	#		0.5*(pโบ-pโป)*(pแตฃ-pโ)

	# comp. convective flux
    flux = zeros(Float64,6,1)
	flux[1] = mฬโ + mฬแตฃ
	flux[2] = mฬโ*uโ + mฬแตฃ*uแตฃ + pโแตฃ*nx
	flux[3] = mฬโ*vโ + mฬแตฃ*vแตฃ + pโแตฃ*ny
	flux[4] = mฬโ*wโ + mฬแตฃ*wแตฃ + pโแตฃ*nz
	flux[5] = mฬโ*Hโโ + mฬแตฃ*Hโแตฃ
	flux[6] = mฬโ*Yโโ + mฬแตฃ*Yโแตฃ

    return flux

end


function SLAU2_HR(
    pโ::Float64,uโ::Float64,vโ::Float64,wโ::Float64,
	Tโ::Float64,Yโโ::Float64,ฯโ::Float64,Hโโ::Float64,cโ::Float64,
    pแตฃ::Float64,uแตฃ::Float64,vแตฃ::Float64,wแตฃ::Float64,
	Tแตฃ::Float64,Yโแตฃ::Float64,ฯแตฃ::Float64,Hโแตฃ::Float64,cแตฃ::Float64,
    Lco::Float64,Uco::Float64,ฮt::Float64,
    wโ::Float64,wโ::Float64,cpi2::Float64,
    nx::Float64,ny::Float64,nz::Float64
)


	# properties of Left
	Uโโ = uโ*nx + vโ*ny + wโ*nz
	# properties of Right
	Uโแตฃ = uแตฃ*nx + vแตฃ*ny + wแตฃ*nz

	cฬ = 0.5*(cโ + cแตฃ)
	#Mฬโ = โ(uฬ^2 + vฬ^2 + wฬ^2)/cฬ
	Mโ = Uโโ/cฬ
	Mแตฃ = Uโแตฃ/cฬ
	# calculate M+ and P+ for left state
	Mโโบ = M_func(Mโ,1.0,0.125)
	pโบ = pre_func(Mโ,1.0,0.0)
	# calculate M- and P- for left state
	Mแตฃโป = M_func(Mแตฃ,-1.0,0.125)
	pโป = pre_func(Mแตฃ,-1.0,0.0)
	# ======= carefully, sensitive ===========
	Mโแตฃ = Mโโบ + Mแตฃโป
	# =======================================
	Mฬโบ = 0.0
    Mฬโป = 0.0
	if Mโแตฃ >= 0.0
        Mฬโบ = Mโแตฃ
        Mฬโป = 0.0
	else
        Mฬโบ = 0.0
        Mฬโป = Mโแตฃ
    end

	#KLR = sqrt(0.5*(uโ^2+vโ^2+wโ^2+uแตฃ^2+vแตฃ^2+wแตฃ^2))
	#g = -max(min(Mโ,0.0),-1.0)*min(max(Mแตฃ,0.0),1.0)
	#Mdash = min(1.0,KLR/cฬ)
	#Vn = (ฯโ*abs(Uโโ)+ฯแตฃ*abs(Uโแตฃ)) / (ฯโ+ฯแตฃ)
	#Vnp = (1.0-g)*Vn + g*abs(Uโโ)
	#Vnm = (1.0-g)*Vn + g*abs(Uโแตฃ)
	#mdot = 0.5*(ฯโ*(Uโโ+Vnp)+ฯแตฃ*(Uโแตฃ-Vnm)-(1.0-Mdash)^2/cฬ*(pแตฃ-pโ))

	mฬโ = cฬ * ฯโ * Mฬโบ
	mฬแตฃ = cฬ * ฯแตฃ * Mฬโป
	#mฬโ = 0.5*(mdot+abs(mdot))
	#mฬแตฃ = 0.5*(mdot-abs(mdot))
	#Kแตค = 0.5
	#pแตค = -2.0 * Kแตค * pโบ * pโป * ฯฬ  * cฬ * (Uโแตฃ-Uโโ)
	#pโแตฃ = pโบ*pโ + pโป*pแตฃ +  pแตค * ฯแตค

	#pโแตฃ = 0.5*(pโ+pแตฃ) - 0.5*KLR/cฬ*0.5*pโบ*pโป*0.5*(pโ+pแตฃ)/cฬ*(Uโแตฃ-Uโโ) + 
	#0.5*(KLR/cฬ)*0.5*(pโ+pแตฃ)*(pโบ+pโป-1.0) - 0.5*(pโบ-pโป)*(pแตฃ-pโ)
	UU = 0.5*(Uโโ+Uโแตฃ)
	if UU > 0.0
		mฬโ = ฯโ * UU
		mฬแตฃ = 0.0
	else
		mฬโ = 0.0
		mฬแตฃ = ฯแตฃ * UU
	end

	#pโแตฃ = pโ*pโบ + pแตฃ*pโป

	pโแตฃ = 0.5*(pโ + pแตฃ)

	# comp. convective flux
    flux = zeros(Float64,6,1)
	flux[1] = mฬโ + mฬแตฃ
	flux[2] = mฬโ*uโ + mฬแตฃ*uแตฃ + pโแตฃ*nx
	flux[3] = mฬโ*vโ + mฬแตฃ*vแตฃ + pโแตฃ*ny
	flux[4] = mฬโ*wโ + mฬแตฃ*wแตฃ + pโแตฃ*nz
	flux[5] = mฬโ*Hโโ + mฬแตฃ*Hโแตฃ
	flux[6] = mฬโ*Yโโ + mฬแตฃ*Yโแตฃ

    return flux


end



function AUSMPWP_N(
    pโ,uโ,vโ,wโ,Tโ,Yโโ,ฯโ,Hโโ,cโ,
    pแตฃ,uแตฃ,vแตฃ,wแตฃ,Tแตฃ,Yโแตฃ,ฯแตฃ,Hโแตฃ,cแตฃ,
    Lco,Uco,ฮt,
    wโ,wโ,cpi2,
    nx,ny,nz
)


	# properties of Left
	Uโโ = uโ*nx + vโ*ny + wโ*nz
	# properties of Right
	Uโแตฃ = uแตฃ*nx + vแตฃ*ny + wแตฃ*nz

	RT = โ(ฯแตฃ/ฯโ)
    ฯฬ = (ฯโ+RT*ฯแตฃ)/(1.0+RT)
    uฬ = (uโ+RT*uแตฃ)/(1.0+RT)
    vฬ = (vโ+RT*vแตฃ)/(1.0+RT)
    wฬ = (wโ+RT*wแตฃ)/(1.0+RT)
	# Low-Diffusion Flux-Splitting Methods for Real Fluid Flows at All Speeds, 1999
	cฬ = 0.5*(cโ + cแตฃ)
	Mco = Uco/cฬ
	Mฬโ = โ(uฬ^2 + vฬ^2 + wฬ^2)/cฬ
	Mun = Lco/ฯ/ฮt/cฬ
	# Scaling ============
	ฮธโ = max(Mฬโ,Mco)
	ฮธโ = min(1.0,max(ฮธโ,Mun))
	ฮธแตค = min(1.0,ฮธโ)
	ฯโ = ฮธโ*(2.0-ฮธโ)
	ฯแตค = ฮธแตค*(2.0-ฮธแตค)
	aSDST = 0.1875*(-4.0+5.0*ฯแตค*ฯแตค)
	Mโ = Uโโ/cฬ
	Mแตฃ = Uโแตฃ/cฬ
	# calculate M+ and P+ for left state
	Mโโบ = M_func(Mโ,1.0,0.125)
	pโบ = pre_func(Mโ,1.0,aSDST)
	# calculate M- and P- for left state
	Mแตฃโป = M_func(Mแตฃ,-1.0,0.125)
	pโป = pre_func(Mแตฃ,-1.0,aSDST)
	# ======= carefully, sensitive ===========
	Mโแตฃ = Mโโบ + Mแตฃโป
	ฯโแตฃ = ( Mโแตฃ > 0.0 ? ฯโ : ฯแตฃ )
	wโ = 1.0 - wโ^3
	wโ = 1.0 - wโ^2
	w = max(wโ,wโ)
	fโ = pโ/(ฯฬ *cฬ^2)*(1.0-w)*ฯฬ /ฯโแตฃ   /ฯโ
	fแตฃ = pแตฃ/(ฯฬ *cฬ^2)*(1.0-w)*ฯฬ /ฯโแตฃ   /ฯโ
	# =======================================
	Mฬโบ = 0.0
    Mฬโป = 0.0
	if Mโแตฃ >= 0.0
        Mฬโบ = Mโโบ + Mแตฃโป * ((1.0-w)*(1.0+fแตฃ)-fโ)
        Mฬโป = Mแตฃโป * w * (1.0+fแตฃ)
	else
        Mฬโบ = Mโโบ * w * (1.0+fโ)
        Mฬโป = Mแตฃโป + Mโโบ * ((1.0-w)*(1.0+fโ)-fแตฃ)
    end
	mฬโ = cฬ * ฯโ * Mฬโบ
	mฬแตฃ = cฬ * ฯแตฃ * Mฬโป
	Kแตค = 0.5
	pแตค = -2.0 * Kแตค * pโบ * pโป * ฯฬ  * cฬ * (Uโแตฃ-Uโโ)
	pโแตฃ = pโบ*pโ + pโป*pแตฃ +  pแตค * ฯแตค
	
	# comp. convective flux
    flux = zeros(Float64,6,1)
	flux[1] = mฬโ + mฬแตฃ
	flux[2] = mฬโ*uโ + mฬแตฃ*uแตฃ + pโแตฃ*nx
	flux[3] = mฬโ*vโ + mฬแตฃ*vแตฃ + pโแตฃ*ny
	flux[4] = mฬโ*wโ + mฬแตฃ*wแตฃ + pโแตฃ*nz
	flux[5] = mฬโ*Hโโ + mฬแตฃ*Hโแตฃ
	flux[6] = mฬโ*Yโโ + mฬแตฃ*Yโแตฃ

    return flux


end



function M_func(M::Float64, op::Float64, ฮฑ::Float64)
    mu = 0.0
	if abs(M) > 1.0 
		mu = 0.5*(M + op*abs(M))
	else
		mu = op*0.25*(M + op)^2.0 + op*ฮฑ*(M*M-1.0)^2.0
    end
	
	return mu
end

function pre_func(M::Float64, op::Float64, ฮฑ::Float64)
    mu = 0.0
	if abs(M) > 1.0
		mu = 0.5*(1.0 + op*sign(M) )
	else
		mu = 0.25*(M + op)^2.0*(2.0-op*M) + op*ฮฑ*M*(M*M-1.0)^2.0
    end
	
	return mu;
end



function Roe(
    pโ,uโ,vโ,wโ,Tโ,Yโโ,ฯโ,Hโโ,cโ,
    pแตฃ,uแตฃ,vแตฃ,wแตฃ,Tแตฃ,Yโแตฃ,ฯแตฃ,Hโแตฃ,cแตฃ,
    Lco,Uco,ฮt,
    wโ,wโ,cpi2,
    nx,ny,nz
)

	# properties of Left
	Uโโ = uโ*nx + vโ*ny + wโ*nz
	# properties of Right
	Uโแตฃ = uแตฃ*nx + vแตฃ*ny + wแตฃ*nz

	RT = โ(ฯแตฃ/ฯโ)
    ฯฬ = (ฯโ+RT*ฯแตฃ)/(1.0+RT)
    uฬ = (uโ+RT*uแตฃ)/(1.0+RT)
    vฬ = (vโ+RT*vแตฃ)/(1.0+RT)
    wฬ = (wโ+RT*wแตฃ)/(1.0+RT)
    Yฬ = (Yโโ+RT*Yโแตฃ)/(1.0+RT)
	
	RT = 1.0
    ฯฬ = (ฯโ+RT*ฯแตฃ)/(1.0+RT)
    uฬ = (uโ+RT*uแตฃ)/(1.0+RT)
    vฬ = (vโ+RT*vแตฃ)/(1.0+RT)
    wฬ = (wโ+RT*wแตฃ)/(1.0+RT)
    Hฬ = (Hโโ+RT*Hโแตฃ)/(1.0+RT)
    Yฬ = (Yโโ+RT*Yโแตฃ)/(1.0+RT)
	Uฬโ = 0.5 * (Uโโ + Uโแตฃ)
	# Low-Diffusion Flux-Splitting Methods for Real Fluid Flows at All Speeds, 1999
	cฬ = 0.5*(cโ + cแตฃ)

	fluxAdvL = zeros(Float64,6)
	fluxAdvL[1] = ฯโ*Uโโ
	fluxAdvL[2] = ฯโ*Uโโ*uโ + pโ*nx
	fluxAdvL[3] = ฯโ*Uโโ*vโ + pโ*ny
	fluxAdvL[4] = ฯโ*Uโโ*wโ + pโ*nz
	fluxAdvL[5] = ฯโ*Uโโ*Hโโ
	fluxAdvL[6] = ฯโ*Uโโ*Yโโ
	
	fluxAdvR = zeros(Float64,6)
	fluxAdvR[1] = ฯแตฃ*Uโแตฃ
	fluxAdvR[2] = ฯแตฃ*Uโแตฃ*uแตฃ + pแตฃ*nx
	fluxAdvR[3] = ฯแตฃ*Uโแตฃ*vแตฃ + pแตฃ*ny
	fluxAdvR[4] = ฯแตฃ*Uโแตฃ*wแตฃ + pแตฃ*nz
	fluxAdvR[5] = ฯแตฃ*Uโแตฃ*Hโแตฃ
	fluxAdvR[6] = ฯแตฃ*Uโแตฃ*Yโแตฃ
	
	
	fluxDissDW = zeros(Float64,6)
	tmpUn = abs(Uฬโ)
	fluxDissDW[1] = tmpUn*(ฯแตฃ-ฯโ)
	fluxDissDW[2] = tmpUn*(ฯแตฃ*uแตฃ-ฯโ*uโ)
	fluxDissDW[3] = tmpUn*(ฯแตฃ*vแตฃ-ฯโ*vโ)
	fluxDissDW[4] = tmpUn*(ฯแตฃ*wแตฃ-ฯโ*wโ)
	fluxDissDW[5] = tmpUn*(ฯแตฃ*(Hโแตฃ-pแตฃ/ฯแตฃ)-ฯโ*(Hโโ-pโ/ฯโ))
	fluxDissDW[6] = tmpUn*(ฯแตฃ*Yโแตฃ-ฯโ*Yโโ)
	
	
	fluxDissDP = zeros(Float64,6)
	tmpUn = Uฬโ/cฬ*(pแตฃ-pโ)
	fluxDissDP[1] = 0.0
	fluxDissDP[2] = tmpUn*nx
	fluxDissDP[3] = tmpUn*ny
	fluxDissDP[4] = tmpUn*nz
	fluxDissDP[5] = tmpUn*Uฬโ
	fluxDissDP[6] = 0.0
	
	fluxDissDU = zeros(Float64,6)
	tmpUn = (cฬ-abs(Uฬโ))/cฬ/cฬ/ฯฬ *(pแตฃ-pโ) + Uฬโ/cฬ*(Uโแตฃ-Uโโ) 
	fluxDissDU[1] = tmpUn*ฯฬ 
	fluxDissDU[2] = tmpUn*ฯฬ *uฬ
	fluxDissDU[3] = tmpUn*ฯฬ *vฬ
	fluxDissDU[4] = tmpUn*ฯฬ *wฬ
	fluxDissDU[5] = tmpUn*ฯฬ *Hฬ
	fluxDissDU[6] = tmpUn*ฯฬ *Yฬ
	

	# comp. convective flux
    flux = zeros(Float64,6)
	flux[:] = 0.5*(fluxAdvL[:]+fluxAdvR[:]) - 
				0.5*(fluxDissDW[:]+fluxDissDP[:]+fluxDissDU[:])


    return flux


end

